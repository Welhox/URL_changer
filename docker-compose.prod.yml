version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: url_shortener
      POSTGRES_USER: urluser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U urluser -d url_shortener"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # URL Shortener Application
  app:
    build: .
    environment:
      - ENVIRONMENT=production
      - DOMAIN=${DOMAIN:-coventure.es}
      - DATABASE_URL=postgresql://urluser:${POSTGRES_PASSWORD:-changeme123}@postgres:5432/url_shortener
      - BASE_URL=https://${DOMAIN:-coventure.es}
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key}
      - API_KEY=${API_KEY:-change-this-api-key}
      - ALLOWED_ORIGINS=https://${DOMAIN:-coventure.es},https://www.${DOMAIN:-coventure.es}
      - RATE_LIMIT_PER_MINUTE=60
      - SENTRY_DSN=${SENTRY_DSN:-}
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data: